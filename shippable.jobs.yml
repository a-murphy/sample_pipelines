jobs:
  #- name: generate-mongo-image-manifest-3
  #  type: manifest
  #  steps:
  #    - GET: mongo-image
  #    - GET: myEcsParams
  
  #- name: thirdExtraRelease
  #  type: release
  #  steps:
  #    - IN: generate-manifest
  #    - TASK: managed

  - name: provisionJob2
    type: provision                           
    steps:
  #    - IN: provisionExternalName
  #    - IN: projectOne
      - IN: version-resource-1
   #   - IN: myOtherEcsParams
      - IN: cliJob
#      - IN: specialCharactersBranch
      - IN: busybox-image
      - IN: myOtherEcsParams
      - IN: specialCharactersBranch
  #    - IN: provisionLoadBalancer
  #- OUT: mongo-image
    on_success:
      - script: echo "Success"
 #     - NOTIFY: notifyMe
    on_failure:
      - script: echo "Failure"
  #    - NOTIFY: notifyMe
  
  
  - name: terraformTest
    type: runSh                           
    steps:
  #    - IN: provisionExternalName
  #    - IN: projectOne
      - IN: version-resource-1
   #   - IN: myOtherEcsParams
      - IN: cliJob
#      - IN: specialCharactersBranch
      - IN: busybox-image
  #    - IN: provisionLoadBalancer
      - TASK:
        - script: echo $PATH
        - script: terraform --version
        - script: which terraform
        - script: which packer
        - script: packer version
  #- OUT: mongo-image
    on_success:
      - script: echo "Success"
 #     - NOTIFY: notifyMe
    on_failure:
      - script: echo "Failure"
  #    - NOTIFY: notifyMe
  
  - name: sample_java_mysql_runCI
    type: runCI        
    steps:
      - IN: gcrConfigResource
      - OUT: mongo-image
      - TASK: managed
    on_start:
      - NOTIFY: emailMe
      - NOTIFY: notifyMe
    on_success:
      - script: echo "Success"
      - NOTIFY: notifyMe
    on_failure:
      - script: echo "Failure"
      - NOTIFY: notifyMe
  
  - name: cliJob
    type: runCLI                           
    steps:
    #  - IN: gcrConfigResource
   #   - IN: gkeConfigResource
    #  - IN: ecrConfigResource
    #  - IN: dockerHubConfigResource
    #  - IN: awsConfigResource
   #   - IN: jFrogResource
   #   - IN: projectOne
      - IN: myOtherEcsParams
      - IN: specialCharactersBranch
      - IN: busybox-image
    #  - IN: dockerTrustedRegistryResource
    #  - IN: privateDockerRegistryResource
      - TASK:
        - script: mkdir -p test
        - script: which gettext
        - script: "echo 'This is a test.  ${AWSCONFIGRESOURCE_NAME} ${AWSCONFIGRESOURCE_VERSIONNUMBER}' > test/test.txt"
        - script: "echo 'This is another test.  ${AWSCONFIGRESOURCE_PATH}' > test2.txt"
        - script: shippable_replace test/test.txt test2.txt
        - script: mv test2.txt test_$BUILD_NUMBER.txt
        - script: cat test_$BUILD_NUMBER.txt
        - script: echo $PATH
        - script: printenv
        - script: terraform --version
        - script: which terraform
        - script: which packer
        - script: packer version
    #    - script: docker login -u $BUSYBOXIMAGE_INTEGRATION_USERNAME -p $BUSYBOXIMAGE_INTEGRATION_PASSWORD -e $BUSYBOXIMAGE_INTEGRATION_EMAIL
    on_success:
      - script: ls "Success"
 #     - NOTIFY: notifyMe
    on_failure:
      - script: ls Failure
 #     - NOTIFY: notifyMe
    always:
      - script: echo "Always"
 #     - NOTIFY: notifyMe
     
     #   - script: jfrog rt u test_$BUILD_NUMBER.txt generic-local
  #       - script: cat test/test.txt
  #       - script: cat test2.txt
  #       - script: "docker pull 544102397216.dkr.ecr.us-west-2.amazonaws.com/test/repository:latest"
  #       - script: "docker pull gcr.io/molten-method-94423/1204_nodejs:latest"
 #       - script: "gcloud projects list"
 #       - script: gcloud config set project molten-method-94423
  #      - script: "gcloud container clusters list"
  #      - script: "kubectl config view"
  #      - script: "kubectl get namespaces"
  #      - script: "aws ecs list-container-instances --cluster test-cluster"
  #      - script: eb init "my-application-name" -p "Node.js"
  #      - script: eb terminate --all --force "my-application-name"
  #    - OUT: customImage

  - name: foo
    type: release
    options:
      action: test
    on_start:
      - NOTIFY: emailMe
      - NOTIFY: notifyMe
    steps:
      - IN: triggerTwo
    #  - IN: sample_pipelines_master_rSync
    #  - IN: time
      - IN: version-resource-1
     # - GET: myEcsParams
     # - GET: version-resource-5
      - IN: generate-manifest
      - TASK: managed
    on_success:
   #    - test1
  #     - test2
       - NOTIFY: notifyMe
    on_failure:
  #     - test
    #   - NOTIFY: notifyMe
       - NOTIFY: emailMe
      
      
  - name: foo5
    type: release
    steps:
#      - IN: version-resource-1
#     # - GET: myEcsParams
#     # - GET: version-resource-5
       - IN: generate-manifest
         switch: off
         versionNumber: x
#      - IN: sample_pipelines_master_rSync
       - TASK: managed
      
  - name: foo4
    type: release
    steps:
     # - GET: version-resource-4
      - IN: generate-manifest
#      - IN: myReplicas
      - IN: version-resource-1
      - TASK: managed
        bump: patch

  - name: generate-mongo-image-manifest-6
    type: manifest
    steps:
    #  - IN: myOtherDockerOptions
      - IN: customImage
        switch: off
 #     - IN: triggerOne
      - IN: new-mongo-image
        pull: false
        switch: off
      - IN: generate-manifest
        switch: off
  #    - GET: generate-manifest
  #    - GET: myEcsParams
  #      applyTo:
  #        - image
      
  #    - GET: myOtherEcsParams
#      - GET: deploy-service
  #    - GET: myOtherDockerOptions
  #      applyTo:
  #        - mongo-image
      - TASK: managed

  - name: generate-manifest
    type: manifest
    steps:
      - IN: mongo-image
        switch: off
      - IN: nginx-image
   #   - OUT: triggerOne
   
   #   - GET: myReplicas
  #    - GET: deploy-service
      - IN: myDockerOptions
      - TASK: managed
      
  - name: ecr-manifest
    type: manifest
    steps:
      - IN: ecr-image
        switch: off
      - IN: myDockerOptions
      - TASK: managed
   
  - name: nginx-manifest2
    type: manifest
    steps:
      - IN: nginx-image
        switch: off
      - IN: sample_java_mysql_runCI
    #  - IN: gitlabProject
      - TASK: managed
      
     
  - name: busybox-manifest2
    type: manifest
    steps:
      - IN: busybox-image
        switch: off
      - IN: sample_java_mysql_runCI
        switch: off
      - TASK: managed
   
  - name: nginx-and-busybox-manifest
    type: manifest
    steps:
      - IN: nginx-manifest
        switch: off
      - IN: busybox-manifest2
        switch: off
    #  - IN: bitbucketProject2
      - TASK: managed
   
  - name: new-manifest
    type: manifest
    steps:
      - IN: mongo-manifest
      - IN: busybox-manifest2
      - TASK: managed

 # - name: deploy-service
#    type: deploy
#    steps:
#      - IN: generate-mongo-image-manifest-6
#      - IN: myEcsCluster

  - name: DCL-deploy
    type: deploy
    steps:
  #    - IN: nginx-manifest2
  #      switch: off
      - IN: myDclCluster
 #     - IN: myEcsParams
#        applyTo:
#          - other
      - IN: myOtherEcsParams
      - IN: foo4
      - TASK: managed

  - name: deploy-dcl-2
    type: deploy
    steps:
 #     - IN: generate-manifest
 #       switch: on
      - IN: myDclCluster
  #   - IN: myEcsParams
      - IN: myOtherEcsParams
      - IN: myOtherDockerOptions
      - TASK: managed
        deployMethod: upgrade
 
  - name: new-ecs-deploy
    type: deploy
    steps:
    #  - IN: foo4
     # - IN: generate-mongo-image-manifest-6
    #  - IN: foo
      - IN: generate-manifest
      - IN: nginx-image
     # - IN: nginx-and-busybox-manifest
     # - IN: new-manifest
      - IN: myLoadBalancer
        applyTo:
          - manifest: generate-manifest
            image: mongo-image
            port: 27017
          - manifest: generate-manifest
            image: mongo-image
            port: 27018
   #   - IN: ecs-deploy2
      - IN: myEcsCluster
      - IN: myReplicas
#      - GET: deploy-service-7
#      - GET: myEcsParams
      - IN: myOtherDockerOptions
        applyTo:
          - mongo-image
     #     - nginx-image
      - TASK: managed
     #   deployMethod: upgrade
     
  - name: replace-ecs-deploy2-2
    type: deploy
    steps:
      - IN: generate-manifest
      - IN: nginx-image
      - IN: myEcsCluster
      - TASK: managed
        deployMethod: replace

  - name: replace-ecs-deploy
    type: deploy
    steps:
   #   - IN: generate-manifest
      - IN: foo4
    #  - IN: busybox-manifest2
  #    - IN: myLoadBalancer
  #      applyTo:
  #        - manifest: generate-manifest
  #          image: mongo-image
  #          port: 27017
      - IN: myEcsCluster
      - IN: myDockerOptions
      - IN: myOtherDockerOptions
    #    applyTo:
    #      - mongo-image
      - TASK: managed
        deployMethod: replace
        
  - name: replace-triton-deploy
    type: deploy
    steps:
      - IN: ecr-manifest
        switch: off
      - IN: tritonCluster
      - IN: myReplicas
      - IN: myOtherDockerOptions
      - TASK: managed
        deployMethod: replace

  - name: new-ecs-deploy-again
    type: deploy
    steps:
      - IN: new-ecs-deploy
        switch: off
      - IN: myEcsCluster
      - TASK: managed
        deployMethod: upgrade

  - name: ecs-deploy3
    type: deploy
    steps:
      - IN: myEcsCluster
      - IN: generate-manifest
      - IN: nginx-manifest2
    #  - OUT: gke-deploy
      - IN: myReplicas
#      - GET: deploy-service-7
  #    - IN: myEcsParams
      - IN: myDockerOptions
      - IN: myOtherDockerOptions
        applyTo:
          - mongo-image
   #   - IN: myLoadBalancer
   #     applyTo:
   #       - manifest: generate-manifest
   #         image: mongo-image
   #         port: 8000
     #   applyTo:
      #    - mongo-image
      - TASK: managed
        deployMethod: upgrade
        
  - name: ecs-deploy6
    type: deploy
    steps:
      - IN: myEcsCluster
      - IN: generate-manifest
      - IN: nginx-manifest2
      - IN: myReplicas
      - IN: myOtherDockerOptions
      - TASK: managed
        deployMethod: upgrade
        
  - name: gke-deploy2
    type: deploy
    steps:
      - IN: nginx-manifest2
  #    - IN: generate-manifest
      - IN: myGKECluster
  #    - IN: myReplicas
      - IN: myOtherDockerOptions
  #      applyTo:
  #        - mongo-image
  #    - IN: myThirdDockerOptions
 #       applyTo:
 #         - nginx-image
      - TASK: managed
        deployMethod: replace
        
 # - name: empty-deploy
 #   type: deploy
 #   steps:
    
 # - name: new-empty-deploy
 #   type: deploy

  - name: customImage
    type: runSh
    steps:
      - IN: nginx-image
      - IN: busybox-image
      - IN: version-resource-1
      - IN: myReplicas
      - IN: myEcsParams
      - IN: myOtherDockerOptions
      - IN: projectOne
      - TASK:
        - script: mkdir testdirectory && cd testdirectory && pwd
        - script: pwd
        - script: "echo '\x1b[34m' $MYECSPARAMS_PARAMS_EIGHT '\x1b[0m'"
        - script: "echo '\x1b[33m' $MYECSPARAMS_VERSION_PARAMS '\x1b[0m'"
        - script: "mkdir -p /build/state/"
        - script: "touch /build/state/mongo-image.env"
        - script: "echo 'versionName=latest' >>  /build/state/mongo-image.env"
        - script: "echo 'anotherProperty=foo' >>  /build/state/mongo-image.env"
        - script: "echo 'anotherProperty2=foo2' >>  /build/state/mongo-image.env"
      - OUT: mongo-image
    on_success:
      - script: echo "Success"
      - NOTIFY: notifyMe
    on_failure:
      - script: echo "Failure"
      - NOTIFY: notifyMe
      
  - name: custom3
    type: runSh
    steps:
      - IN: customImage
      - IN: pipelines-dv-image
      - TASK:
        - script: "ls /build/IN/customImage"
      
  - name: custom2
    type: runSh
    steps:
      - IN: gitlabProject
        versionNumber: 4
      - IN: time
      - TASK:
        - script: "ls -al /build/IN/gitlabProject/gitRepo"
        
  - name: custom5
    type: runSh
    steps:
      - IN: ecr-image
      - TASK:
        - script: "apt-get install unzip jq"
        - script: 'curl -s "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"'
        - script: "unzip awscli-bundle.zip"
        - script: "./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws"
        - script: "chmod +x /build/IN/ecr-image/integration.env"
        - script: ". /build/IN/ecr-image/integration.env"
        - script: "dockerLogin=$(AWS_ACCESS_KEY_ID=$aws_access_key_id AWS_SECRET_ACCESS_KEY=$aws_secret_access_key aws ecr get-login --region us-west-2)"
        - script: "$dockerLogin"
        - script: "docker pull $(cat /build/IN/ecr-image/version.json | jq -r '.sourceName'):$(cat /build/IN/ecr-image/version.json | jq -r '.version.versionName')"

  - name: custom6
    type: runSh
    steps:
      - IN: ecr-image
      - TASK:
        - script: "echo DOCKER"
        - script: "docker --version"
        - script: "which docker"
        - script: "echo AWS"
        - script: "aws --version"
        - script: "which aws"
        - script: "echo EB"
        - script: "eb --version"
        - script: "which eb"
        - script: "echo GCLOUD"
        - script: "gcloud --version"
        - script: "which gcloud"
        - script: "echo KUBECTL"
    #    - script: "kubectl version"
        - script: "which kubectl"
        - script: "echo JFROG"
        - script: "jfrog --version"
        - script: "which jfrog"

  - name: custom7
    type: runSh
    steps:
      - IN: sample_java_mysql_runCI
      - IN: custom6
      - TASK:
        - script: "echo two"

  - name: custom4
    type: runSh
    steps:
      - IN: privateProject3
      - OUT: pipelines-dv-image
      - TASK:
        - script: "ls -al /build/IN/privateProject3/gitRepo"

 # - name: CI-project
 #   type: runCI
 #   steps:
 #    # - IN: triggerOne
 #    # - IN: myEcsParams
 #     - IN: projectOne
 #     - TASK: managed
 #     - OUT: mongo-image

