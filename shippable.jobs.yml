jobs:
  #- name: generate-mongo-image-manifest-3
  #  type: manifest
  #  steps:
  #    - GET: mongo-image
  #    - GET: myEcsParams
  
  #- name: thirdExtraRelease
  #  type: release
  #  steps:
  #    - IN: generate-manifest
  #    - TASK: managed

  - name: foo
    type: release
    options:
      action: test
    on_start:
      - NOTIFY: emailMe
      - NOTIFY: notifyMe
    steps:
    #  - IN: triggerTwo
      - IN: version-resource-1
     # - GET: myEcsParams
     # - GET: version-resource-5
      - IN: generate-manifest
      - TASK: managed
    on_success:
       - test1
       - test2
       - NOTIFY: notifyMe
    on_failure:
       - test
    #   - NOTIFY: notifyMe
    #   - NOTIFY: emailMe
      
      
  - name: foo5
    type: release
    steps:
#      - IN: version-resource-1
#     # - GET: myEcsParams
#     # - GET: version-resource-5
       - IN: generate-manifest
         versionNumber: x
#      - IN: sample_pipelines_master_rSync
       - TASK: managed
      
  - name: foo4
    type: release
    options:
      action: patch
    steps:
     # - GET: version-resource-4
      - IN: deploy-dcl
    #  - IN: myReplicas
      - IN: version-resource-1
      - TASK: managed

  - name: generate-mongo-image-manifest-6
    type: manifest
    steps:
    #  - IN: myOtherDockerOptions
      - IN: custom
 #     - IN: triggerOne
      - IN: mongo-image
        pull: false
        switch: off
      - IN: generate-manifest
  #    - GET: generate-manifest
  #    - GET: myEcsParams
  #      applyTo:
  #        - image
      
  #    - GET: myOtherEcsParams
#      - GET: deploy-service
  #    - GET: myOtherDockerOptions
  #      applyTo:
  #        - mongo-image
      - TASK: managed

  - name: generate-manifest
    type: manifest
    steps:
      - IN: mongo-image
        switch: off
   #   - OUT: triggerOne
   
   #   - GET: myReplicas
  #    - GET: deploy-service
    #  - IN: myOtherDockerOptions
      - TASK: managed
   

 # - name: deploy-service
#    type: deploy
#    steps:
#      - IN: generate-mongo-image-manifest-6
#      - IN: myEcsCluster

  - name: deploy-service-7
    type: deploy
    steps:
      - IN: generate-manifest
        switch: off
      - IN: myDclCluster
      - IN: myEcsParams
        applyTo:
          - other
      - IN: myOtherEcsParams
      - IN: foo4
      - TASK: managed

  - name: deploy-dcl
    type: deploy
    steps:
      - IN: generate-manifest
        switch: on
      - IN: myDclCluster
   #   - IN: myEcsParams
      - IN: myOtherEcsParams
      - TASK: managed
        deployMethod: upgrade
 
  - name: new-ecs-deploy
    type: deploy
    steps:
    #  - IN: foo4
     # - IN: generate-mongo-image-manifest-6
    #  - IN: foo
      - IN: generate-manifest
      - IN: myLoadBalancer
        applyTo:
          - manifest: generate-manifest
            image: mongo-image
            port: 27017
#      - IN: ecs-deploy2
      - IN: myEcsCluster
      - IN: myReplicas
#      - GET: deploy-service-7
#      - GET: myEcsParams
      - IN: myOtherDockerOptions
#        applyTo:
#          - mongo-image
      - TASK: managed
        deployMethod: upgrade

  - name: new-ecs-deploy-again
    type: deploy
    steps:
      - IN: new-ecs-deploy
        switch: off
      - IN: myEcsCluster
      - TASK: managed
        deployMethod: upgrade

  - name: ecs-deploy2
    type: deploy
    steps:
      - IN: myEcsCluster
      - IN: foo
     # - IN: myReplicas
#      - GET: deploy-service-7
    #  - GET: myEcsParams
      - IN: myOtherDockerOptions
     #   applyTo:
      #    - mongo-image
      - TASK: managed
        deployMethod: blueGreen
        
  - name: gke-deploy
    type: deploy
    steps:
      - IN: new-ecs-deploy-again
      - IN: myGKECluster
      - IN: myOtherDockerOptions
        applyTo:
          - mongo-image
 #     - IN: myThirdDockerOptions
 #       applyTo:
 #         - nginx-image
      - TASK: managed
        deployMethod: blueGreen

  - name: custom
    type: runSh
    steps:
      - TASK:
        - script: "mkdir -p /build/state/"
        - script: "touch /build/state/mongo-image.env"
        - script: "echo 'versionName=latest' >>  /build/state/mongo-image.env"
        - script: "echo 'anotherProperty=foo' >>  /build/state/mongo-image.env"
        - script: "echo 'anotherProperty2=foo2' >>  /build/state/mongo-image.env"
      - OUT: mongo-image
      
  - name: custom3
    type: runSh
    steps:
      - IN: custom
      - TASK:
        - script: "ls /build/IN/custom"
      
  - name: custom2
    type: runSh
    steps:
      - IN: custom
      - TASK:
        - script: "cat /build/IN/custom/runShSteps/mongo-image.env"

  - name: CI-project
    type: runCI
    steps:
     # - IN: triggerOne
     # - IN: myEcsParams
      - IN: projectOne
      - TASK: managed
      - OUT: mongo-image

